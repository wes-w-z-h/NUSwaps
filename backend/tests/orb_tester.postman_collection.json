{
	"info": {
		"_postman_id": "bd701176-5939-412b-92cf-52a3e7578ddb",
		"name": "orb_tester",
		"description": "Contains requests to test the backend API.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34848415",
		"_collection_link": "https://red-space-438189.postman.co/workspace/My-Workspace~6724a9e3-b4f8-4942-8974-1b299634a7f7/collection/34848415-bd701176-5939-412b-92cf-52a3e7578ddb?action=share&source=collection_link&creator=34848415"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login a valid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const userSchema = {",
									"    \"title\": \"User\",",
									"    \"description\": \"User schema\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"email\": {",
									"            \"type\": \"string\",",
									"            \"minLength\": 1,",
									"        },",
									"        \"swapRequests\": {",
									"            type: \"array\"",
									"        }, ",
									"        \"id\": {",
									"            type: \"string\"",
									"        }",
									"    },",
									"    \"required\": [ \"email\", \"id\" ]",
									"}",
									"",
									"function validateUserSchema(user) {",
									"    pm.expect(user).to.have.jsonSchema(userSchema);",
									"    pm.expect(user.password).to.not.exist;",
									"}",
									"",
									"",
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Schema validation\", function () {",
									"    const responseData = pm.response.json();",
									"    validateUserSchema(responseData);",
									"});",
									"",
									"",
									"pm.test(\"Verify the presence of token\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.token).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"e1113215@u.nus.edu\",\n  \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/{{auth_api}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{auth_api}}",
								"login"
							]
						},
						"description": "### POST /api/auth/login\n\nThis endpoint makes an HTTP POST request to logn a user.\n\n#### Request\n\n#### Response (200)\n\nThe response will be a single user of the unique id passed as a parameter."
					},
					"response": [
						{
							"name": "Login a valid user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"e1113215@u.nus.edu\",\n  \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Set-Cookie",
									"value": "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2ODFhNzgwZDAzODg2MGE0OGY0Mzk0NSIsImlhdCI6MTcyMDQzNDY0MiwiZXhwIjoxNzIwNTIxMDQyfQ.sOn_ZDu7aEtYQb_kQt9jjXK5Rvgo7rGbarG3lFrc15M; Max-Age=86400; Path=/; Expires=Tue, 09 Jul 2024 10:30:42 GMT; HttpOnly; Secure; SameSite=Strict"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "244"
								},
								{
									"key": "ETag",
									"value": "W/\"f4-yZItRKn4RADFUVJpvPCQdZnoEFs\""
								},
								{
									"key": "Date",
									"value": "Mon, 08 Jul 2024 10:30:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"6681a780d038860a48f43945\",\n    \"email\": \"e1113215@u.nus.edu\",\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2ODFhNzgwZDAzODg2MGE0OGY0Mzk0NSIsImlhdCI6MTcyMDQzNDY0MiwiZXhwIjoxNzIwNDM1NTQyfQ.jx0clQLeKxp8PMerWtLIq79o7hUwta0YNyB0btFr8iw\"\n}"
						}
					]
				},
				{
					"name": "Verify access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getReq = {",
									"  url: `${pm.environment.get('url')}/api/auth/login`,",
									"  method: 'POST',",
									"  header: {",
									"    \"Content-Type\": \"application/json\"",
									"  },",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({",
									"      \"email\": \"e1122360@u.nus.edu\",",
									"      \"password\": \"123\"",
									"    })",
									"  }",
									"}",
									"",
									"pm.sendRequest(getReq, (err, res) => {",
									"  const data = res.json();",
									"",
									"  if (err) {",
									"    console.log(err);",
									"  } else {",
									"    // console.log(data);",
									"    pm.environment.set('token', data.token)",
									"    const cookies = res.headers.filter(header => header.key.toLowerCase() === 'set-cookie');",
									"    if (cookies.length > 0) {",
									"      const cookie = cookies[0].value.split(';')[0].slice(4); // Get the first cookie and its value",
									"      // Set the cookie header",
									"      pm.request.headers.add({",
									"          key: 'Cookie',",
									"          value: `jwt=${cookie}` ",
									"      });",
									"    }",
									"  }",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test('Messsage to be of type string', function () {",
									"     pm.expect(pm.response.json().message).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/{{auth_api}}/verify-token",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{auth_api}}",
								"verify-token"
							]
						}
					},
					"response": [
						{
							"name": "Verify access token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/auth/verify-token",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth",
										"verify-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "25"
								},
								{
									"key": "ETag",
									"value": "W/\"19-jgDcMjV0Q9M4zhY3AAZHdP7NGCw\""
								},
								{
									"key": "Date",
									"value": "Mon, 08 Jul 2024 10:30:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Valid token\"\n}"
						}
					]
				},
				{
					"name": "Refresh access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test('Token contained in the response', function () {",
									"    pm.expect(pm.response.json()).to.have.property('token');",
									"});",
									"",
									"pm.test('Token to be of type string', function () {",
									"     pm.expect(pm.response.json().token).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const getReq = {",
									"  url: `${pm.environment.get('url')}/api/auth/login`,",
									"  method: 'POST',",
									"  header: {",
									"    \"Content-Type\": \"application/json\"",
									"  },",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({",
									"      \"email\": \"e1122360@u.nus.edu\",",
									"      \"password\": \"123\"",
									"    })",
									"  }",
									"}",
									"",
									"pm.sendRequest(getReq, (err, res) => {",
									"  const data = res.json();",
									"",
									"  if (err) {",
									"    console.log(err);",
									"  } else {",
									"    // console.log(data);",
									"    pm.environment.set('token', data.token)",
									"    const cookies = res.headers.filter(header => header.key.toLowerCase() === 'set-cookie');",
									"    if (cookies.length > 0) {",
									"      const cookie = cookies[0].value.split(';')[0].slice(4); // Get the first cookie and its value",
									"      // Set the cookie header",
									"      pm.request.headers.add({",
									"          key: 'Cookie',",
									"          value: `jwt=${cookie}` ",
									"      });",
									"    }",
									"  }",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/{{auth_api}}/refresh",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{auth_api}}",
								"refresh"
							]
						},
						"description": "### GET /api/users/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing user.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user\n    \n\n#### Response (200)\n\nThe response will be a single user of the unique id passed as a parameter."
					},
					"response": [
						{
							"name": "Refresh access token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/auth/refresh",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "183"
								},
								{
									"key": "ETag",
									"value": "W/\"b7-ukBqnW7IhEm+s6uiavY+oyairsQ\""
								},
								{
									"key": "Date",
									"value": "Mon, 08 Jul 2024 10:30:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2ODFhNzgwZDAzODg2MGE0OGY0Mzk0NSIsImlhdCI6MTcyMDQzNDYyNiwiZXhwIjoxNzIwNDM1NTI2fQ.znbOsubhonN2junGuHAUFJZkDs8TKcsr7fTrX3ljaL8\"\n}"
						}
					]
				},
				{
					"name": "Logout user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/{{auth_api}}/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{auth_api}}",
								"logout"
							]
						},
						"description": "### GET /api/users/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing user.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user\n    \n\n#### Response (200)\n\nThe response will be a single user of the unique id passed as a parameter."
					},
					"response": [
						{
							"name": "valid user",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{user_api}}/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{user_api}}",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "6646163c653bc018ba11896f"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "489"
								},
								{
									"key": "ETag",
									"value": "W/\"1e9-uyr1yI3bA+ppefiWVm319icIZbI\""
								},
								{
									"key": "Date",
									"value": "Thu, 16 May 2024 20:11:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"_id\": \"6646163c653bc018ba11896f\",\n    \"username\": \"DO-NOT-DELETE\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \"Recitation-2\",\n            \"request\": \"Recitation-1\",\n            \"status\": false,\n            \"_id\": \"6646163c653bc018ba118970\",\n            \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n            \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n            \"id\": \"6646163c653bc018ba118970\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n    \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n    \"__v\": 0,\n    \"id\": \"6646163c653bc018ba11896f\"\n}"
						}
					]
				}
			],
			"description": "This folder contains requests for testing CRUD functionality of authentication: login and logout."
		},
		{
			"name": "Swaps",
			"item": [
				{
					"name": "POST requests",
					"item": [
						{
							"name": "Create a swap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const swapSchema = {",
											"    \"title\": \"Swap\",",
											"    \"description\": \"Swap schema\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            type: \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"courseId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"lessonType\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"current\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"request\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        }, ",
											"        \"status\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"    },",
											"    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
											"}",
											"",
											"function validateSwapSchema(swapRequest) {",
											"    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
											"}",
											"",
											"function validateSwapFunc(swapRequest) {",
											"    pm.expect(swapRequest).to.be.an('object');",
											"    pm.expect(swapRequest.userId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"userId should not be empty\");",
											"    pm.expect(swapRequest.courseId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"courseId should not be empty\");",
											"    pm.expect(swapRequest.lessonType).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"lessonType should not be empty\");",
											"    pm.expect(swapRequest.current).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"current should not be empty\");",
											"    pm.expect(swapRequest.request).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"request should not be empty\");",
											"    pm.expect(swapRequest.id).to.be.a('string').and.to.exist;",
											"}",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.variables.set('swapId', responseData.id);",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  validateSwapFunc(responseData);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"  ",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS1231S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"05F\",\n    \"request\": \"09A\",\n    \"status\": \"UNMATCHED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/{{swap_api}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}"
									]
								},
								"description": "### POST /api/swaps\n\nThis endpoint allows you to add a new swap to the system.\n\n#### Request\n\n> Body \n  \n\n- `userId` (string, required): The unique id of the user this swap belongs to.\n    \n- `courseId` (string, required): The course the lessons belong to.\n    \n- `lessonType` (string, required): The typle of lesson to be swapped.\n    \n- `current` (object, required): A RawLesson.\n    \n- `request` (object, required): A RawLesson.\n    \n\n#### Response (201)\n\nThe response will be the newly created swap."
							},
							"response": [
								{
									"name": "Create a swap",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"6681a780d038860a48f43945\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"05F\",\n    \"request\": \"09A\",\n    \"status\": \"UNMATCHED\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/swaps",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"swaps"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "167"
										},
										{
											"key": "ETag",
											"value": "W/\"a7-ZTcPIMPAJgJw6NWlDIVwzV0Owho\""
										},
										{
											"key": "Date",
											"value": "Sun, 07 Jul 2024 18:54:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"668ae460495aaf63fbe5b178\",\n    \"userId\": \"6681ac51d038860a48f43a14\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"05F\",\n    \"request\": \"09A\",\n    \"status\": \"UNMATCHED\"\n}"
								}
							]
						}
					],
					"description": "This folder contains POST requests to test the API endpoints."
				},
				{
					"name": "GET requests",
					"item": [
						{
							"name": "Get a users swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  console.log(\"res: \", res);",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"    const cookies = res.headers.filter(header => header.key.toLowerCase() === 'set-cookie');",
											"    if (cookies.length > 0) {",
											"      const cookie = cookies[0].value.split(';')[0]; // Get the first cookie and its value",
											"      pm.environment.set('cookie', cookie.slice(4));",
											"      console.log(\"cookie\", cookie.slice(4));",
											"      pm.cookies.add(cookie);",
											"      console.log(pm.cookies.get('jwt') === cookie.slice(4));",
											"    }",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const swapSchema = {",
											"    \"title\": \"Swap\",",
											"    \"description\": \"Swap schema\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            type: \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"courseId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"lessonType\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"current\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"request\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        }, ",
											"        \"status\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"    },",
											"    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
											"}",
											"",
											"function validateSwapSchema(swapRequest) {",
											"    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
											"}",
											"",
											"function validateSwapFunc(swapRequest) {",
											"    pm.expect(swapRequest).to.be.an('object');",
											"    pm.expect(swapRequest.userId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"userId should not be empty\");",
											"    pm.expect(swapRequest.courseId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"courseId should not be empty\");",
											"    pm.expect(swapRequest.lessonType).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"lessonType should not be empty\");",
											"    pm.expect(swapRequest.current).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"current should not be empty\");",
											"    pm.expect(swapRequest.request).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"request should not be empty\");",
											"    pm.expect(swapRequest.id).to.be.a('string').and.to.exist;",
											"}",
											"",
											"",
											"pm.test('Response status code is 200', function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Schema validation\", function() {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(swap => validateSwapSchema(swap));",
											"})",
											"",
											"",
											"pm.test(\"Validate the swap object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(swap => validateSwapFunc(swap));",
											"  pm.environment.set(\"swap_id\", responseData[0].id) ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{swap_api}}/userswaps",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}",
										"userswaps"
									]
								}
							},
							"response": [
								{
									"name": "Get a users swaps",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/swaps/userswaps",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"swaps",
												"userswaps"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "508"
										},
										{
											"key": "ETag",
											"value": "W/\"1fc-W6SyM3eHtcIpj2eTgqQ9rNnW5kc\""
										},
										{
											"key": "Date",
											"value": "Sun, 07 Jul 2024 18:35:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"id\": \"668ab40c464b81efec5c329b\",\n        \"userId\": \"6681ac51d038860a48f43a14\",\n        \"courseId\": \"ACC1701\",\n        \"lessonType\": \"Tutorial\",\n        \"current\": \"V06\",\n        \"request\": \"V01\",\n        \"status\": \"UNMATCHED\"\n    },\n    {\n        \"id\": \"6685a821e6551d31409a55c6\",\n        \"userId\": \"6681ac51d038860a48f43a14\",\n        \"courseId\": \"ACC1701X\",\n        \"lessonType\": \"Tutorial\",\n        \"current\": \"X08\",\n        \"request\": \"X02\",\n        \"status\": \"UNMATCHED\"\n    },\n    {\n        \"id\": \"66858b1deb2a18db24c1bf6d\",\n        \"userId\": \"6681ac51d038860a48f43a14\",\n        \"courseId\": \"CS1101S\",\n        \"lessonType\": \"Recitation\",\n        \"current\": \"16E\",\n        \"request\": \"09A\",\n        \"status\": \"UNMATCHED\"\n    }\n]"
								}
							]
						},
						{
							"name": "Get a swap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const swapSchema = {",
											"    \"title\": \"Swap\",",
											"    \"description\": \"Swap schema\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            type: \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"courseId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"lessonType\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"current\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"request\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        }, ",
											"        \"status\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"    },",
											"    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
											"}",
											"",
											"function validateSwapSchema(swapRequest) {",
											"    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
											"}",
											"",
											"function validateSwapFunc(swapRequest) {",
											"    pm.expect(swapRequest).to.be.an('object');",
											"    pm.expect(swapRequest.userId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"userId should not be empty\");",
											"    pm.expect(swapRequest.courseId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"courseId should not be empty\");",
											"    pm.expect(swapRequest.lessonType).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"lessonType should not be empty\");",
											"    pm.expect(swapRequest.current).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"current should not be empty\");",
											"    pm.expect(swapRequest.request).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"request should not be empty\");",
											"    pm.expect(swapRequest.id).to.be.a('string').and.to.exist;",
											"}",
											"",
											"",
											"pm.test('Response status code is 200', function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Schema validation\", function() {",
											"    const responseData = pm.response.json();",
											"    validateSwapSchema(responseData);",
											"})",
											"",
											"",
											"pm.test(\"Validate the swap object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  validateSwapFunc(responseData);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{swap_api}}/{{swap_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}",
										"{{swap_id}}"
									]
								},
								"description": "### GET /api/swaps/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing swap.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap.\n    \n\n#### Response (200)\n\nThe response will be a single swap of the unique id passed as a parameter."
							},
							"response": [
								{
									"name": "Get a swap",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/swaps/6645fa44653bc018ba11891f",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"swaps",
												"6645fa44653bc018ba11891f"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "294"
										},
										{
											"key": "ETag",
											"value": "W/\"126-hozER4OOZfmdPgXUQSxWOH1Idzg\""
										},
										{
											"key": "Date",
											"value": "Thu, 16 May 2024 20:28:42 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"_id\": \"6645fa44653bc018ba11891f\",\n    \"userId\": \"6645f739653bc018ba118902\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"Tutorial-2\",\n    \"request\": \"Tutorial-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-16T12:21:24.997Z\",\n    \"updatedAt\": \"2024-05-16T12:21:24.997Z\",\n    \"__v\": 0,\n    \"id\": \"6645fa44653bc018ba11891f\"\n}"
								}
							]
						},
						{
							"name": "Invalid get a swap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 400', function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{swap_api}}/123",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}",
										"123"
									]
								},
								"description": "### GET /api/swaps/:id\n\nThis endpoint makes an HTTP GET request with a non-existent id.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap.\n    \n\n#### Response (400)\n\nThe response will be a single swap of the unique id passed as a parameter."
							},
							"response": [
								{
									"name": "Invalid id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/swaps/6641ca6c0cf12b8bd38dd7b",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"swaps",
												"6641ca6c0cf12b8bd38dd7b"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "122"
										},
										{
											"key": "ETag",
											"value": "W/\"7a-L4CXLx7AiXgA5tfakybSzYJIYjc\""
										},
										{
											"key": "Date",
											"value": "Wed, 15 May 2024 18:49:32 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Cast to ObjectId failed for value \\\"6641ca6c0cf12b8bd38dd7b\\\" (type string) at path \\\"_id\\\" for model \\\"Swap\\\"\"\n}"
								}
							]
						}
					],
					"description": "This folder contains GET requests to test the API endpoint."
				},
				{
					"name": "PATCH requests",
					"item": [
						{
							"name": "Update a swap",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const swapSchema = {",
											"    \"title\": \"Swap\",",
											"    \"description\": \"Swap schema\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            type: \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"courseId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"lessonType\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"current\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"request\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        }, ",
											"        \"status\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"    },",
											"    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
											"}",
											"",
											"function validateSwapSchema(swapRequest) {",
											"    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
											"}",
											"",
											"function validateSwapFunc(swapRequest) {",
											"    pm.expect(swapRequest).to.be.an('object');",
											"    pm.expect(swapRequest.userId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"userId should not be empty\");",
											"    pm.expect(swapRequest.courseId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"courseId should not be empty\");",
											"    pm.expect(swapRequest.lessonType).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"lessonType should not be empty\");",
											"    pm.expect(swapRequest.current).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"current should not be empty\");",
											"    pm.expect(swapRequest.request).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"request should not be empty\");",
											"    pm.expect(swapRequest.id).to.be.a('string').and.to.exist;",
											"}",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  validateSwapFunc(responseData);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"6681a780d038860a48f43945\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"05F\",\n    \"request\": \"1B\",\n    \"status\": \"UNMATCHED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/{{swap_api}}/{{swap_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}",
										"{{swap_id}}"
									]
								},
								"description": "### PATCH /api/swaps\n\nThis endpoint is used to patch an existing swap.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `userId` (string, required): The unique id of the user this swap belongs to.\n    \n- `courseId` (string, required): The course the lessons belong to.\n    \n- `lessonType` (string, required): The typle of lesson to be swapped.\n    \n- `current` (object, required): A RawLesson.\n    \n- `request` (object, required): A RawLesson.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
							},
							"response": [
								{
									"name": "Update a swap",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"66445bf587da7d7883aff879\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Recitation\",\n    \"current\": \n    {\n        \"classNo\": \"2\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-13\",\n            \"end\": \"2024-05-25\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Saturday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    },\n    \"request\": \n    {\n        \"classNo\": \"1\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-12\",\n            \"end\": \"2024-05-24\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Friday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/api/swaps/66462f49f9e60e48bc97af75",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"swaps",
												"66462f49f9e60e48bc97af75"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "300"
										},
										{
											"key": "ETag",
											"value": "W/\"12c-tQKQ3Y3xYUUb1LG7x+txrqq8js8\""
										},
										{
											"key": "Date",
											"value": "Thu, 16 May 2024 20:41:39 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"_id\": \"66462f49f9e60e48bc97af75\",\n    \"userId\": \"66445bf587da7d7883aff879\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Recitation\",\n    \"current\": \"Recitation-2\",\n    \"request\": \"Recitation-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-16T16:07:37.275Z\",\n    \"updatedAt\": \"2024-05-16T20:41:39.950Z\",\n    \"__v\": 0,\n    \"id\": \"66462f49f9e60e48bc97af75\"\n}"
								}
							]
						}
					],
					"description": "This folder contains PATCH requests to test the API endpoint."
				},
				{
					"name": "DELETE requests",
					"item": [
						{
							"name": "Delete a swap",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const swapSchema = {",
											"    \"title\": \"Swap\",",
											"    \"description\": \"Swap schema\",",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {",
											"            type: \"string\"",
											"        },",
											"        \"userId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"courseId\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"lessonType\": {",
											"            \"type\": \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"current\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"        \"request\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        }, ",
											"        \"status\": {",
											"            type: \"string\",",
											"            \"minLength\": 1,",
											"        },",
											"    },",
											"    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
											"}",
											"",
											"function validateSwapSchema(swapRequest) {",
											"    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
											"}",
											"",
											"function validateSwapFunc(swapRequest) {",
											"    pm.expect(swapRequest).to.be.an('object');",
											"    pm.expect(swapRequest.userId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"userId should not be empty\");",
											"    pm.expect(swapRequest.courseId).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"courseId should not be empty\");",
											"    pm.expect(swapRequest.lessonType).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"lessonType should not be empty\");",
											"    pm.expect(swapRequest.current).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"current should not be empty\");",
											"    pm.expect(swapRequest.request).to.exist.and.to.be.a('string')",
											"        .and.to.have.lengthOf.at.least(1, \"request should not be empty\");",
											"    pm.expect(swapRequest.id).to.be.a('string').and.to.exist;",
											"}",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Response Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  if (responseData) {",
											"    pm.variables.set('swap_id', responseData.id);",
											"    pm.expect(responseData).to.be.an('object');",
											"    validateSwapFunc(responseData);",
											"  }",
											"});",
											"",
											"pm.test(\"Swap no longer exists\", function () {",
											"  if (pm.variables.get('swap_id')) {",
											"    const getReq = {",
											"      url: `${pm.environment.get('url')}/api/swaps/${pm.variables.get('swap_id')}`,",
											"      method: 'GET',",
											"      header: {",
											"        'Authorization': `Bearer ${pm.environment.get('token')}`",
											"      }",
											"    }",
											"    pm.sendRequest(getReq, (err, res) => {",
											"      pm.expect(err).to.not.exist;",
											"      pm.expect(res.code).to.equal(404);",
											"      pm.expect(res.json()).to.be.an('object');",
											"      pm.expect(res.json().msg).to.be.equal('Swap not found');",
											"    })",
											"  } ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/{{swap_api}}/{{swap_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{swap_api}}",
										"{{swap_id}}"
									]
								},
								"description": "This request sends a POST request and a DELETE request to delete the created swap, based on environment variables, should not be used to delete existing swaps.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap to be deleted.\n    \n\n#### Response (200)\n\nThe response will be the deleted swap."
							},
							"response": [
								{
									"name": "Test deleting a swap",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/swaps/{{delete_swap_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"swaps",
												"{{delete_swap_id}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "294"
										},
										{
											"key": "ETag",
											"value": "W/\"126-VduFr7JfEdVPYw7ZYDl3MqNAVY4\""
										},
										{
											"key": "Date",
											"value": "Fri, 17 May 2024 05:38:44 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"_id\": \"6646ed64466b4bb4a5c861cb\",\n    \"userId\": \"6645f739653bc018ba118902\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"Tutorial-2\",\n    \"request\": \"Tutorial-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-17T05:38:44.048Z\",\n    \"updatedAt\": \"2024-05-17T05:38:44.048Z\",\n    \"__v\": 0,\n    \"id\": \"6646ed64466b4bb4a5c861cb\"\n}"
								}
							]
						}
					],
					"description": "This folder contains DELETE requests to test the API endpoints."
				}
			],
			"description": "This folder contains requests for testing CRUD functionality of swaps.\n\n#### Swap\n\n- `userId (string, required)`: The unique id of the user this swap belongs to.\n    \n- `courseId (string, required)`: The module code the swap belongs to.\n    \n- `lessonType (string, required)`: The type of the classes to be swapped.\n    \n- `current (string, required)`: The current class the user has.\n    \n- `request (string, required)`: The desired class of the user.\n    \n- `status (boolean)`: A boolean representing successful swap.\n    \n- `_id (string)`: The unique id of this swap.\n    \n- `createdAt (Date)`: The date of creation of the swap.\n    \n- `updatedAt (Date)`: The date of update of the swap.\n    \n- `__v (number)`: The version number of this swap.\n    \n- `id (string)`: The unique id of this swap."
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "PATCH requests",
					"item": [
						{
							"name": "Update a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Correct oldPassword is valid\", function () {",
											"    const responseJSON = pm.response.json();",
											"    pm.expect(responseJSON).to.be.an('object');",
											"    pm.expect(responseJSON.message).to.equal(\"Update successful\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"    pm.environment.set('delete_swap_id', data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"oldPassword\": \"123\",\n    \"newPassword\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/{{user_api}}/edit",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{user_api}}",
										"edit"
									]
								},
								"description": "### PATCH /api/users\n\nThis endpoint is used to patch an existing user.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n    \n- `password` (string, optional): The password of the user.\n    \n- `swapRequests` (array, optional): An array of swap request objects.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
							},
							"response": [
								{
									"name": "Example response for updating a user",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"new-pw\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/{{user_api}}/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{user_api}}",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "6645f739653bc018ba118902"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "483"
										},
										{
											"key": "ETag",
											"value": "W/\"1e3-ZbZmneK7eO7NqoYBLBOXJHHPRfc\""
										},
										{
											"key": "Date",
											"value": "Thu, 16 May 2024 20:12:33 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"_id\": \"6645f739653bc018ba118902\",\n    \"username\": \"TO-BE-UPDATED\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \"Tutorial-2\",\n            \"request\": \"Tutorial-1\",\n            \"status\": false,\n            \"_id\": \"664668b133b480751c70b3cd\",\n            \"createdAt\": \"2024-05-16T20:12:33.142Z\",\n            \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n            \"id\": \"664668b133b480751c70b3cd\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T12:08:25.119Z\",\n    \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n    \"__v\": 0,\n    \"id\": \"6645f739653bc018ba118902\"\n}"
								}
							]
						},
						{
							"name": "Update invalid  password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 300ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(300);",
											"});",
											"",
											"",
											"pm.test(\"Wrong old password is invalid\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.error).to.be.equal(\"Unauthorised: check old password\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getReq = {",
											"  url: `${pm.environment.get('url')}/api/auth/login`,",
											"  method: 'POST',",
											"  header: {",
											"    \"Content-Type\": \"application/json\"",
											"  },",
											"  body: {",
											"    mode: 'raw',",
											"    raw: JSON.stringify({",
											"      \"email\": \"e1122360@u.nus.edu\",",
											"      \"password\": \"123\"",
											"    })",
											"  }",
											"}",
											"",
											"pm.sendRequest(getReq, (err, res) => {",
											"  const data = res.json();",
											"",
											"  if (err) {",
											"    console.log(err);",
											"  } else {",
											"    console.log(data);",
											"    pm.environment.set('token', data.token)",
											"    pm.environment.set('delete_swap_id', data.id);",
											"  }",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"oldPassword\": \"1234\",\n    \"newPassword\": \"123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/{{user_api}}/edit",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{user_api}}",
										"edit"
									]
								},
								"description": "### PATCH /api/users\n\nThis endpoint is used to patch an existing user.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n    \n- `password` (string, optional): The password of the user.\n    \n- `swapRequests` (array, optional): An array of swap request objects.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
							},
							"response": [
								{
									"name": "Example response for updating a user",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"new-pw\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/{{user_api}}/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"{{user_api}}",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "6645f739653bc018ba118902"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "483"
										},
										{
											"key": "ETag",
											"value": "W/\"1e3-ZbZmneK7eO7NqoYBLBOXJHHPRfc\""
										},
										{
											"key": "Date",
											"value": "Thu, 16 May 2024 20:12:33 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"_id\": \"6645f739653bc018ba118902\",\n    \"username\": \"TO-BE-UPDATED\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \"Tutorial-2\",\n            \"request\": \"Tutorial-1\",\n            \"status\": false,\n            \"_id\": \"664668b133b480751c70b3cd\",\n            \"createdAt\": \"2024-05-16T20:12:33.142Z\",\n            \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n            \"id\": \"664668b133b480751c70b3cd\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T12:08:25.119Z\",\n    \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n    \"__v\": 0,\n    \"id\": \"6645f739653bc018ba118902\"\n}"
								}
							]
						}
					],
					"description": "This folder contains PATCH requests to test the API endpoint."
				}
			],
			"description": "Contains requests for testing CRUD functionality for users.\n\n#### User Object\n\n- `username (string, required)`: The username of the user.\n- `password (string, optional)`: The password of the user.\n- `swapRequests (array, optional)`: An array of swap request objects.\n    - `swapID (string)`: The unique identifier of the swap request.\n    - `userID (string)`: The unique identifier of the user associated with the swap request.\n    - `courseID (string)`: The unique identifier of the course associated with the swap request.\n    - `status (boolean)`: The status of the swap request.\n    - `createdAt (string)`: The timestamp of when the swap request was created.\n    - `updatedAt (string)`: The timestamp of when the swap request was last updated.\n    - `__v (integer)`: Version key.\n    - `id (string)`: The unique identifier of the swap request.\n- `id (string)`: The unique identifier of the user."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}