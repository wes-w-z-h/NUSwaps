{
  "info": {
    "_postman_id": "bd701176-5939-412b-92cf-52a3e7578ddb",
    "name": "orb_tester",
    "description": "Contains requests to test the backend API.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "34848415",
    "_collection_link": "https://red-space-438189.postman.co/workspace/My-Workspace~6724a9e3-b4f8-4942-8974-1b299634a7f7/collection/34848415-bd701176-5939-412b-92cf-52a3e7578ddb?action=share&source=collection_link&creator=34848415"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "GET requests",
          "item": [
            {
              "name": "Get all users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Content type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Schema validation\", function() {",
                      "    const responseData = pm.response.json();",
                      "    pm.expect(responseData).to.be.an(\"array\");",
                      "    responseData.forEach(validateUserSchema);",
                      "})",
                      "",
                      "pm.test(\"Verify the presence and data types of swapRequests array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    pm.environment.set('user_id', responseData[0].id)",
                      "",
                      "    pm.expect(responseData).to.be.an('array');",
                      "    responseData.forEach(user => {",
                      "        pm.expect(user.swapRequests).to.be.an('array');",
                      "        user.swapRequests.forEach(validateSwapSchema);",
                      "    });",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}"]
                },
                "description": "### GET /api/users\n\nThis endpoint retrieves user information based on the provided user ID.\n\n#### Request\n\nNo request body parameters are required for this request.\n\n#### Response (200)\n\nThe response will be a JSON array containing users."
              },
              "response": [
                {
                  "name": "Example response of all users",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "7361"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"1cc1-HlR43PB0PXtc59beKS/b5VwrMHw\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:00:36 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n    {\n        \"_id\": \"6645f739653bc018ba118902\",\n        \"username\": \"TO-BE-UPDATED\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"6645f739653bc018ba118902\",\n                \"courseId\": \"CS1101S\",\n                \"lessonType\": \"Tutorial\",\n                \"current\": \"Tutorial-2\",\n                \"request\": \"Tutorial-1\",\n                \"status\": false,\n                \"_id\": \"66463f567ba32372e3b49db9\",\n                \"createdAt\": \"2024-05-16T17:16:06.333Z\",\n                \"updatedAt\": \"2024-05-16T17:16:06.333Z\",\n                \"id\": \"66463f567ba32372e3b49db9\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T12:08:25.119Z\",\n        \"updatedAt\": \"2024-05-16T17:16:06.333Z\",\n        \"__v\": 0,\n        \"id\": \"6645f739653bc018ba118902\"\n    },\n    {\n        \"_id\": \"6646163c653bc018ba11896f\",\n        \"username\": \"DO-NOT-DELETE\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"6646163c653bc018ba118970\",\n                \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n                \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n                \"id\": \"6646163c653bc018ba118970\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n        \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n        \"__v\": 0,\n        \"id\": \"6646163c653bc018ba11896f\"\n    },\n    {\n        \"_id\": \"66461851653bc018ba118987\",\n        \"username\": \"ttttt\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66461851653bc018ba118988\",\n                \"createdAt\": \"2024-05-16T14:29:37.899Z\",\n                \"updatedAt\": \"2024-05-16T14:29:37.899Z\",\n                \"id\": \"66461851653bc018ba118988\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T14:29:37.899Z\",\n        \"updatedAt\": \"2024-05-16T14:29:37.899Z\",\n        \"__v\": 0,\n        \"id\": \"66461851653bc018ba118987\"\n    },\n    {\n        \"_id\": \"66461f571360512c2aebfc3f\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66461f571360512c2aebfc40\",\n                \"createdAt\": \"2024-05-16T14:59:35.997Z\",\n                \"updatedAt\": \"2024-05-16T14:59:35.997Z\",\n                \"id\": \"66461f571360512c2aebfc40\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T14:59:35.997Z\",\n        \"updatedAt\": \"2024-05-16T14:59:35.997Z\",\n        \"__v\": 0,\n        \"id\": \"66461f571360512c2aebfc3f\"\n    },\n    {\n        \"_id\": \"66461fa21360512c2aebfc50\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66461fa21360512c2aebfc51\",\n                \"createdAt\": \"2024-05-16T15:00:50.119Z\",\n                \"updatedAt\": \"2024-05-16T15:00:50.119Z\",\n                \"id\": \"66461fa21360512c2aebfc51\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T15:00:50.119Z\",\n        \"updatedAt\": \"2024-05-16T15:00:50.119Z\",\n        \"__v\": 0,\n        \"id\": \"66461fa21360512c2aebfc50\"\n    },\n    {\n        \"_id\": \"664626438db759f5fa576b25\",\n        \"username\": \"ts-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T15:29:07.609Z\",\n        \"updatedAt\": \"2024-05-16T15:29:07.609Z\",\n        \"__v\": 0,\n        \"id\": \"664626438db759f5fa576b25\"\n    },\n    {\n        \"_id\": \"664626458db759f5fa576b27\",\n        \"username\": \"ts-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T15:29:09.852Z\",\n        \"updatedAt\": \"2024-05-16T15:29:09.852Z\",\n        \"__v\": 0,\n        \"id\": \"664626458db759f5fa576b27\"\n    },\n    {\n        \"_id\": \"664638cb1360512c2aebfc8c\",\n        \"username\": \"test-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T16:48:11.243Z\",\n        \"updatedAt\": \"2024-05-16T16:48:11.243Z\",\n        \"__v\": 0,\n        \"id\": \"664638cb1360512c2aebfc8c\"\n    },\n    {\n        \"_id\": \"6646399c1360512c2aebfc8e\",\n        \"username\": \"test-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T16:51:40.917Z\",\n        \"updatedAt\": \"2024-05-16T16:51:40.917Z\",\n        \"__v\": 0,\n        \"id\": \"6646399c1360512c2aebfc8e\"\n    },\n    {\n        \"_id\": \"664639ef1360512c2aebfc90\",\n        \"username\": \"test-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T16:53:03.094Z\",\n        \"updatedAt\": \"2024-05-16T16:53:03.094Z\",\n        \"__v\": 0,\n        \"id\": \"664639ef1360512c2aebfc90\"\n    },\n    {\n        \"_id\": \"66463aac1360512c2aebfca1\",\n        \"username\": \"test-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T16:56:12.297Z\",\n        \"updatedAt\": \"2024-05-16T16:56:12.297Z\",\n        \"__v\": 0,\n        \"id\": \"66463aac1360512c2aebfca1\"\n    },\n    {\n        \"_id\": \"66463afb1360512c2aebfca6\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463afb1360512c2aebfca7\",\n                \"createdAt\": \"2024-05-16T16:57:31.941Z\",\n                \"updatedAt\": \"2024-05-16T16:57:31.941Z\",\n                \"id\": \"66463afb1360512c2aebfca7\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T16:57:31.942Z\",\n        \"updatedAt\": \"2024-05-16T16:57:31.942Z\",\n        \"__v\": 0,\n        \"id\": \"66463afb1360512c2aebfca6\"\n    },\n    {\n        \"_id\": \"66463b0a1360512c2aebfca9\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463b0a1360512c2aebfcaa\",\n                \"createdAt\": \"2024-05-16T16:57:46.690Z\",\n                \"updatedAt\": \"2024-05-16T16:57:46.690Z\",\n                \"id\": \"66463b0a1360512c2aebfcaa\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T16:57:46.690Z\",\n        \"updatedAt\": \"2024-05-16T16:57:46.690Z\",\n        \"__v\": 0,\n        \"id\": \"66463b0a1360512c2aebfca9\"\n    },\n    {\n        \"_id\": \"66463b201360512c2aebfcac\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463b201360512c2aebfcad\",\n                \"createdAt\": \"2024-05-16T16:58:08.400Z\",\n                \"updatedAt\": \"2024-05-16T16:58:08.400Z\",\n                \"id\": \"66463b201360512c2aebfcad\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T16:58:08.401Z\",\n        \"updatedAt\": \"2024-05-16T16:58:08.401Z\",\n        \"__v\": 0,\n        \"id\": \"66463b201360512c2aebfcac\"\n    },\n    {\n        \"_id\": \"66463b211360512c2aebfcaf\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463b211360512c2aebfcb0\",\n                \"createdAt\": \"2024-05-16T16:58:09.174Z\",\n                \"updatedAt\": \"2024-05-16T16:58:09.174Z\",\n                \"id\": \"66463b211360512c2aebfcb0\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T16:58:09.174Z\",\n        \"updatedAt\": \"2024-05-16T16:58:09.174Z\",\n        \"__v\": 0,\n        \"id\": \"66463b211360512c2aebfcaf\"\n    },\n    {\n        \"_id\": \"66463b211360512c2aebfcb2\",\n        \"username\": \"goners\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463b211360512c2aebfcb3\",\n                \"createdAt\": \"2024-05-16T16:58:09.769Z\",\n                \"updatedAt\": \"2024-05-16T16:58:09.769Z\",\n                \"id\": \"66463b211360512c2aebfcb3\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T16:58:09.769Z\",\n        \"updatedAt\": \"2024-05-16T16:58:09.769Z\",\n        \"__v\": 0,\n        \"id\": \"66463b211360512c2aebfcb2\"\n    },\n    {\n        \"_id\": \"66463b671360512c2aebfcb8\",\n        \"username\": \"test-user\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T16:59:19.334Z\",\n        \"updatedAt\": \"2024-05-16T16:59:19.334Z\",\n        \"__v\": 0,\n        \"id\": \"66463b671360512c2aebfcb8\"\n    },\n    {\n        \"_id\": \"66463c7cb696221ce86f7933\",\n        \"username\": \"testsetter\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"66463c7cb696221ce86f7934\",\n                \"createdAt\": \"2024-05-16T17:03:56.023Z\",\n                \"updatedAt\": \"2024-05-16T17:03:56.023Z\",\n                \"id\": \"66463c7cb696221ce86f7934\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T17:03:56.023Z\",\n        \"updatedAt\": \"2024-05-16T17:03:56.023Z\",\n        \"__v\": 0,\n        \"id\": \"66463c7cb696221ce86f7933\"\n    },\n    {\n        \"_id\": \"66464b5b7ba32372e3b49e47\",\n        \"username\": \"testsetter\",\n        \"swapRequests\": [],\n        \"createdAt\": \"2024-05-16T18:07:23.015Z\",\n        \"updatedAt\": \"2024-05-16T18:07:23.015Z\",\n        \"__v\": 0,\n        \"id\": \"66464b5b7ba32372e3b49e47\"\n    },\n    {\n        \"_id\": \"664662e233b480751c70b3ab\",\n        \"username\": \"testsetter\",\n        \"swapRequests\": [\n            {\n                \"userId\": \"664244ddf55103b32a093fa4\",\n                \"courseId\": \"CS1010X\",\n                \"lessonType\": \"Recitation\",\n                \"current\": \"Recitation-2\",\n                \"request\": \"Recitation-1\",\n                \"status\": false,\n                \"_id\": \"664662e233b480751c70b3ac\",\n                \"createdAt\": \"2024-05-16T19:47:46.583Z\",\n                \"updatedAt\": \"2024-05-16T19:47:46.583Z\",\n                \"id\": \"664662e233b480751c70b3ac\"\n            }\n        ],\n        \"createdAt\": \"2024-05-16T19:47:46.583Z\",\n        \"updatedAt\": \"2024-05-16T19:47:46.583Z\",\n        \"__v\": 0,\n        \"id\": \"664662e233b480751c70b3ab\"\n    }\n]"
                }
              ]
            },
            {
              "name": "Get a valid user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test('Response status code is 200', function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Content type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Schema validation\", function () {",
                      "    const responseData = pm.response.json();",
                      "    validateUserSchema(responseData);",
                      "});",
                      "",
                      "pm.test(\"Correct user\", function () {",
                      "    const responseData = pm.response.json();",
                      "    const userId = pm.request.url.path[2];",
                      "    pm.expect(responseData.id).to.be.equal(userId);",
                      "});",
                      "",
                      "pm.test(\"Verify the presence and data types of swapRequests array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData.swapRequests).to.be.an('array');",
                      "    responseData.swapRequests.forEach(validateSwapSchema);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/{{user_api}}/{{user_id}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", "{{user_id}}"]
                },
                "description": "### GET /api/users/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing user.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user\n    \n\n#### Response (200)\n\nThe response will be a single user of the unique id passed as a parameter."
              },
              "response": [
                {
                  "name": "valid user",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{url}}/{{user_api}}/:id",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "6646163c653bc018ba11896f"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "489"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"1e9-uyr1yI3bA+ppefiWVm319icIZbI\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:11:48 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6646163c653bc018ba11896f\",\n    \"username\": \"DO-NOT-DELETE\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \"Recitation-2\",\n            \"request\": \"Recitation-1\",\n            \"status\": false,\n            \"_id\": \"6646163c653bc018ba118970\",\n            \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n            \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n            \"id\": \"6646163c653bc018ba118970\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n    \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n    \"__v\": 0,\n    \"id\": \"6646163c653bc018ba11896f\"\n}"
                }
              ]
            },
            {
              "name": "Get invalid user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status code is 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('User not found', function () {",
                      "    const responseData = pm.response.json();",
                      "    pm.expect(responseData.msg).to.be.equal('User not found');",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/{{user_api}}/:id",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "6646163c653bc018ba11896e"
                    }
                  ]
                },
                "description": "### GET /api/users/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing user.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user\n    \n\n#### Response (200)\n\nThe response will be a single user of the unique id passed as a parameter."
              },
              "response": [
                {
                  "name": "Invalid user",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "",
                        "value": "",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{url}}/{{user_api}}/:id",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "6646163c653bc018ba11896e"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "489"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"1e9-uyr1yI3bA+ppefiWVm319icIZbI\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:11:48 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6646163c653bc018ba11896f\",\n    \"username\": \"DO-NOT-DELETE\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \"Recitation-2\",\n            \"request\": \"Recitation-1\",\n            \"status\": false,\n            \"_id\": \"6646163c653bc018ba118970\",\n            \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n            \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n            \"id\": \"6646163c653bc018ba118970\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T14:20:44.620Z\",\n    \"updatedAt\": \"2024-05-16T14:20:44.620Z\",\n    \"__v\": 0,\n    \"id\": \"6646163c653bc018ba11896f\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains GET requests to test the API endpoint."
        },
        {
          "name": "POST requests",
          "item": [
            {
              "name": "Create invalid user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {",
                      "  pm.response.to.have.status(400);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 300ms\", function () {",
                      "    const responseData = pm.response.json();",
                      "    pm.expect(responseData.error).to.be.equal(\"User validation failed: password: Path `password` is required.\");",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"SHOULDNOTBEHERE\",\n  \"password\": \"\",\n  \"swapRequests\": [\n    {\n      \"userId\": \"664244ddf55103b32a093fa4\",\n      \"courseId\": \"CS1010X\",\n      \"lessonType\": \"Recitation\",\n      \"current\": {\n        \"classNo\": \"2\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n          \"start\": \"2024-04-13\",\n          \"end\": \"2024-05-25\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Saturday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n      },\n      \"request\": {\n        \"classNo\": \"1\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n          \"start\": \"2024-04-12\",\n          \"end\": \"2024-05-24\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Friday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n      }\n    }\n  ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}"]
                },
                "description": "### POST /api/users\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request\n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n- `password` (string, optional): The password of the user.\n- `swapRequests` (array, optional): An array of swap requests associated with the user.\n    \n\n#### Response\n\nThe response will be the newly created user."
              },
              "response": [
                {
                  "name": "Example response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"username\": \"SHOULDNOTBEHERE\",\n  \"password\": \"\",\n  \"swapRequests\": [\n    {\n      \"userId\": \"664244ddf55103b32a093fa4\",\n      \"courseId\": \"CS1010X\",\n      \"lessonType\": \"Recitation\",\n      \"current\": {\n        \"classNo\": \"2\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n          \"start\": \"2024-04-13\",\n          \"end\": \"2024-05-25\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Saturday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n      },\n      \"request\": {\n        \"classNo\": \"1\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n          \"start\": \"2024-04-12\",\n          \"end\": \"2024-05-24\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Friday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n      }\n    }\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}"]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "367"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"16f-pKUl5cul77JGmIdQjdvNTSZ9JOE\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 19:47:46 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"username\": \"testsetter\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \"Recitation-2\",\n            \"request\": \"Recitation-1\",\n            \"status\": false,\n            \"_id\": \"664662e233b480751c70b3ac\",\n            \"createdAt\": \"2024-05-16T19:47:46.583Z\",\n            \"updatedAt\": \"2024-05-16T19:47:46.583Z\",\n            \"id\": \"664662e233b480751c70b3ac\"\n        }\n    ],\n    \"id\": \"664662e233b480751c70b3ab\"\n}"
                }
              ]
            },
            {
              "name": "Create and Delete user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "const responseData = pm.response.json();",
                      "",
                      "pm.test(\"Response status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 300ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Schema validation\", function () {",
                      "    validateUserSchema(responseData);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify the presence and data types of swapRequests array\", function () {",
                      "    pm.expect(responseData.swapRequests).to.be.an('array');",
                      "    responseData.swapRequests.forEach(validateSwapSchema);",
                      "});",
                      "",
                      "",
                      "// removes newly created user after tests ",
                      "const deleteReq = {",
                      "    url: `${pm.environment.get('url')}/api/users/${responseData.id}`,",
                      "    method: 'DELETE',",
                      "};",
                      "pm.sendRequest(deleteReq, (err, res) => {",
                      "    console.log(err ? err : res.json());",
                      "})",
                      "",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"goners\",\n    \"password\": \"ts-password\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Recitation\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Recitation\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}"]
                },
                "description": "### POST /api/users\n\nThis endpoint is used to create a new user with swap requests and DELETES the newly created user afterwards, purely for testing the API endpoint, should not be used to create users.\n\n#### Request\n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n    \n- `password` (string, optional): The password of the user.\n    \n- `swapRequests` (array, optional): An array of swap request objects.\n    \n\n#### Response (201 )\n\nThe response will be the newly created user which will be deleted automatically."
              },
              "response": [
                {
                  "name": "Example response",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"username\": \"goners\",\n    \"password\": \"ts-password\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Recitation\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Recitation\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/api/users",
                      "host": ["{{url}}"],
                      "path": ["api", "users"]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "363"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"16b-73tIqhCE4Sy0b1NBLFyqEooIheo\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:11:31 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"username\": \"goners\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"664244ddf55103b32a093fa4\",\n            \"courseId\": \"CS1010X\",\n            \"lessonType\": \"Recitation\",\n            \"current\": \"Recitation-2\",\n            \"request\": \"Recitation-1\",\n            \"status\": false,\n            \"_id\": \"6646687333b480751c70b3c9\",\n            \"createdAt\": \"2024-05-16T20:11:31.939Z\",\n            \"updatedAt\": \"2024-05-16T20:11:31.939Z\",\n            \"id\": \"6646687333b480751c70b3c9\"\n        }\n    ],\n    \"id\": \"6646687333b480751c70b3c8\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains relevant POST requests for testing the API endpoint."
        },
        {
          "name": "PATCH requests",
          "item": [
            {
              "name": "Update a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test(\"Response status code is 200\", function () {",
                      "  pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 300ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Schema validation\", function () {",
                      "    const responseData = pm.response.json();",
                      "    validateUserSchema(responseData);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Verify the presence and data types of swapRequests array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData.swapRequests).to.be.an('array');",
                      "    responseData.swapRequests.forEach(validateSwapSchema);",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"new-pw\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}/{{user_id}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", "{{user_id}}"]
                },
                "description": "### PATCH /api/users\n\nThis endpoint is used to patch an existing user.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n    \n- `password` (string, optional): The password of the user.\n    \n- `swapRequests` (array, optional): An array of swap request objects.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
              },
              "response": [
                {
                  "name": "Example response for updating a user",
                  "originalRequest": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"new-pw\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}/:id",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "6645f739653bc018ba118902"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "483"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"1e3-ZbZmneK7eO7NqoYBLBOXJHHPRfc\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:12:33 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6645f739653bc018ba118902\",\n    \"username\": \"TO-BE-UPDATED\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \"Tutorial-2\",\n            \"request\": \"Tutorial-1\",\n            \"status\": false,\n            \"_id\": \"664668b133b480751c70b3cd\",\n            \"createdAt\": \"2024-05-16T20:12:33.142Z\",\n            \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n            \"id\": \"664668b133b480751c70b3cd\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T12:08:25.119Z\",\n    \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n    \"__v\": 0,\n    \"id\": \"6645f739653bc018ba118902\"\n}"
                }
              ]
            },
            {
              "name": "Update invalid  password",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 400\", function () {",
                      "  pm.response.to.have.status(400);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 300ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(300);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Password validation\", function () {",
                      "    const responseData = pm.response.json();",
                      "    pm.expect(responseData.error).to.be.equal(\"Validation failed: password: Path `password` is required.\");",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}/:id",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "664fff3f5b003e41cef97bf3"
                    }
                  ]
                },
                "description": "### PATCH /api/users\n\nThis endpoint is used to patch an existing user.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `username` (string, required): The username of the user.\n    \n- `password` (string, optional): The password of the user.\n    \n- `swapRequests` (array, optional): An array of swap request objects.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
              },
              "response": [
                {
                  "name": "Example response for updating a user",
                  "originalRequest": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"username\": \"TO-BE-UPDATED\",\n    \"password\": \"new-pw\",\n    \"swapRequests\": \n    [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \n            {\n                \"classNo\": \"2\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-13\",\n                    \"end\": \"2024-05-25\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Saturday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            },\n            \"request\": \n            {\n                \"classNo\": \"1\",\n                \"startTime\": \"1930\",\n                \"endTime\": \"2100\",\n                \"weeks\": {\n                    \"start\": \"2024-04-12\",\n                    \"end\": \"2024-05-24\"\n                },\n                \"venue\": \"COM3-01-21\",\n                \"day\": \"Friday\",\n                \"lessonType\": \"Tutorial\",\n                \"size\": 55,\n                \"covidZone\": \"A\"\n            }\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}/:id",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "6645f739653bc018ba118902"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "483"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"1e3-ZbZmneK7eO7NqoYBLBOXJHHPRfc\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:12:33 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6645f739653bc018ba118902\",\n    \"username\": \"TO-BE-UPDATED\",\n    \"swapRequests\": [\n        {\n            \"userId\": \"6645f739653bc018ba118902\",\n            \"courseId\": \"CS1101S\",\n            \"lessonType\": \"Tutorial\",\n            \"current\": \"Tutorial-2\",\n            \"request\": \"Tutorial-1\",\n            \"status\": false,\n            \"_id\": \"664668b133b480751c70b3cd\",\n            \"createdAt\": \"2024-05-16T20:12:33.142Z\",\n            \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n            \"id\": \"664668b133b480751c70b3cd\"\n        }\n    ],\n    \"createdAt\": \"2024-05-16T12:08:25.119Z\",\n    \"updatedAt\": \"2024-05-16T20:12:33.142Z\",\n    \"__v\": 0,\n    \"id\": \"6645f739653bc018ba118902\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains PATCH requests to test the API endpoint."
        },
        {
          "name": "DELETE requests",
          "item": [
            {
              "name": "Test delete a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Existing test scripts",
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response Content-Type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Schema validation\", function () {",
                      "    const responseData = pm.response.json();",
                      "    validateUserSchema(responseData);",
                      "});",
                      "",
                      "",
                      "pm.test(\"User no longer exists\", function () {",
                      "  if (pm.variables.get('id')) {",
                      "    pm.sendRequest(`${pm.environment.get('url')}/api/users/${pm.variables.get('id')}`, (err, res) => {",
                      "      pm.expect(err).to.not.exist;",
                      "      pm.expect(res.json().msg).to.be.equal(\"User not found\");",
                      "    })",
                      "  } ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const getReq = {",
                      "  url: `${pm.environment.get('url')}/api/users`,",
                      "  method: 'POST',",
                      "  header: {",
                      "    \"Content-Type\": \"application/json\"",
                      "  },",
                      "  body: {",
                      "    mode: 'raw',",
                      "    raw: JSON.stringify({",
                      "      'username': 'RNAODMOUSER',",
                      "      'password': 'pewpew',",
                      "      'swapRequests': []",
                      "    })",
                      "  }",
                      "}",
                      "",
                      "pm.sendRequest(getReq, (err, res) => {",
                      "  const data = res.json();",
                      "",
                      "  if (err) {",
                      "    console.log(err);",
                      "  } else {",
                      "    pm.environment.set('delete_user_id', data.id);",
                      "  }",
                      "})"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}/{{delete_user_id}}",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", "{{delete_user_id}}"]
                },
                "description": "This request sends a POST request and a DELETE request to delete the created user, based on environment variables, should not be used to delete existing users.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user to be deleted.\n    \n\n#### Response (200)\n\nThe response will be the deleted user."
              },
              "response": [
                {
                  "name": "Delete existing user",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}/{{delete_user_id}}",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", "{{delete_user_id}}"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "191"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"bf-dS7qdeG3PxkRBO7eSophZ2qrGDs\""
                    },
                    {
                      "key": "Date",
                      "value": "Fri, 17 May 2024 05:50:57 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6646f041466b4bb4a5c86241\",\n    \"username\": \"deleter\",\n    \"swapRequests\": [],\n    \"createdAt\": \"2024-05-17T05:50:57.325Z\",\n    \"updatedAt\": \"2024-05-17T05:50:57.325Z\",\n    \"__v\": 0,\n    \"id\": \"6646f041466b4bb4a5c86241\"\n}"
                }
              ]
            },
            {
              "name": "Delete non-existing user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status code is 404', function () {",
                      "    pm.expect(pm.response.code).to.equal(404);",
                      "});",
                      "",
                      "pm.test('User not found', function () {",
                      "    const responseData = pm.response.json();",
                      "    pm.expect(responseData.msg).to.be.equal('User not found');",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const getReq = {",
                      "  url: `${pm.environment.get('url')}/api/users`,",
                      "  method: 'POST',",
                      "  header: {",
                      "    \"Content-Type\": \"application/json\"",
                      "  },",
                      "  body: {",
                      "    mode: 'raw',",
                      "    raw: JSON.stringify({",
                      "      'username': 'deleter',",
                      "      'password': 'pewpew',",
                      "      'swapRequests': []",
                      "    })",
                      "  }",
                      "}",
                      "",
                      "pm.sendRequest(getReq, (err, res) => {",
                      "  const data = res.json();",
                      "",
                      "  if (err) {",
                      "    console.log(err);",
                      "  } else {",
                      "    pm.environment.set('delete_user_id', data.id);",
                      "  }",
                      "})"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/{{user_api}}/:id",
                  "host": ["{{url}}"],
                  "path": ["{{user_api}}", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "6646163c653bc018ba11896e"
                    }
                  ]
                },
                "description": "This request sends a POST request and a DELETE request to delete the created user, based on environment variables, should not be used to delete existing users.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the user to be deleted.\n    \n\n#### Response (200)\n\nThe response will be the deleted user."
              },
              "response": [
                {
                  "name": "Delete existing user",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/{{user_api}}/:id",
                      "host": ["{{url}}"],
                      "path": ["{{user_api}}", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "6646163c653bc018ba11896e"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "191"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"bf-dS7qdeG3PxkRBO7eSophZ2qrGDs\""
                    },
                    {
                      "key": "Date",
                      "value": "Fri, 17 May 2024 05:50:57 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6646f041466b4bb4a5c86241\",\n    \"username\": \"deleter\",\n    \"swapRequests\": [],\n    \"createdAt\": \"2024-05-17T05:50:57.325Z\",\n    \"updatedAt\": \"2024-05-17T05:50:57.325Z\",\n    \"__v\": 0,\n    \"id\": \"6646f041466b4bb4a5c86241\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains DELETE requests for testing the API endpoints."
        }
      ],
      "description": "Contains requests for testing CRUD functionality for users.\n\n#### User Object\n\n- `username (string, required)`: The username of the user.\n- `password (string, optional)`: The password of the user.\n- `swapRequests (array, optional)`: An array of swap request objects.\n    - `swapID (string)`: The unique identifier of the swap request.\n    - `userID (string)`: The unique identifier of the user associated with the swap request.\n    - `courseID (string)`: The unique identifier of the course associated with the swap request.\n    - `status (boolean)`: The status of the swap request.\n    - `createdAt (string)`: The timestamp of when the swap request was created.\n    - `updatedAt (string)`: The timestamp of when the swap request was last updated.\n    - `__v (integer)`: Version key.\n    - `id (string)`: The unique identifier of the swap request.\n- `id (string)`: The unique identifier of the user."
    },
    {
      "name": "Swaps",
      "item": [
        {
          "name": "GET requests",
          "item": [
            {
              "name": "Get all swaps",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test('Response status code is 200', function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Content type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the swap objects\", function () {",
                      "  const responseData = pm.response.json();",
                      "  pm.environment.set('swap_id', responseData[0].id)",
                      "  pm.expect(responseData).to.be.an('array');",
                      "  responseData.forEach(validateSwapSchema);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/api/swaps",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps"]
                },
                "description": "### GET /api/swaps/\n\nThis endpoint makes an HTTP GET request to retrieve all swaps.\n\n#### Request\n\nNo request body parameters are required for this request.\n\n#### Response (200)\n\nThe response will be an array of swaps."
              },
              "response": [
                {
                  "name": "Get all swaps",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "localhost:4000/api/swaps",
                      "host": ["localhost"],
                      "port": "4000",
                      "path": ["api", "swaps"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "3370"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"d2a-ZwbC20a/V/8q+tksKpUqjplacrY\""
                    },
                    {
                      "key": "Date",
                      "value": "Wed, 15 May 2024 17:52:06 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n    {\n        \"_id\": \"6641ca6c0cf12b8bd38dd7bc\",\n        \"swapID\": 1234,\n        \"courseID\": \"1234\",\n        \"lessonType\": \"tutorial\",\n        \"userID\": 1234,\n        \"status\": false,\n        \"createdAt\": \"2024-05-13T08:08:12.920Z\",\n        \"updatedAt\": \"2024-05-13T08:08:12.920Z\",\n        \"__v\": 0,\n        \"id\": \"6641ca6c0cf12b8bd38dd7bc\"\n    },\n    {\n        \"_id\": \"664245c80c13178c935c91a7\",\n        \"swapID\": 1234,\n        \"userID\": 1234,\n        \"courseID\": \"1234\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-13T16:54:32.857Z\",\n        \"updatedAt\": \"2024-05-13T16:54:32.857Z\",\n        \"__v\": 0,\n        \"id\": \"664245c80c13178c935c91a7\"\n    },\n    {\n        \"_id\": \"664245fdd521b6ffaaa67df4\",\n        \"swapID\": 1234,\n        \"userID\": 1234,\n        \"courseID\": \"1234\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-13T16:55:25.536Z\",\n        \"updatedAt\": \"2024-05-13T16:55:25.536Z\",\n        \"__v\": 0,\n        \"id\": \"664245fdd521b6ffaaa67df4\"\n    },\n    {\n        \"_id\": \"6642474d6ec481727c0ae165\",\n        \"swapID\": 1234,\n        \"userID\": 1234,\n        \"courseID\": \"1234\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-13T17:01:01.216Z\",\n        \"updatedAt\": \"2024-05-13T17:01:01.216Z\",\n        \"__v\": 0,\n        \"id\": \"6642474d6ec481727c0ae165\"\n    },\n    {\n        \"_id\": \"664460aabc70f1606acc860e\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"2\",\n        \"request\": \"1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:13:46.390Z\",\n        \"updatedAt\": \"2024-05-15T07:13:46.390Z\",\n        \"__v\": 0,\n        \"id\": \"664460aabc70f1606acc860e\"\n    },\n    {\n        \"_id\": \"664463ff547c5d8b70ed41fc\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"2\",\n        \"request\": \"1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:27:59.375Z\",\n        \"updatedAt\": \"2024-05-15T07:27:59.375Z\",\n        \"__v\": 0,\n        \"id\": \"664463ff547c5d8b70ed41fc\"\n    },\n    {\n        \"_id\": \"66446446522ff2b28eb04327\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"2\",\n        \"request\": \"1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:29:10.093Z\",\n        \"updatedAt\": \"2024-05-15T07:29:10.093Z\",\n        \"__v\": 0,\n        \"id\": \"66446446522ff2b28eb04327\"\n    },\n    {\n        \"_id\": \"6644647ea0ba780337a843e8\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation2\",\n        \"request\": \"Recitation1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:30:06.913Z\",\n        \"updatedAt\": \"2024-05-15T07:30:06.913Z\",\n        \"__v\": 0,\n        \"id\": \"6644647ea0ba780337a843e8\"\n    },\n    {\n        \"_id\": \"6644648f28c5c3fcdff516b5\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation - 2\",\n        \"request\": \"Recitation - 1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:30:23.560Z\",\n        \"updatedAt\": \"2024-05-15T07:30:23.560Z\",\n        \"__v\": 0,\n        \"id\": \"6644648f28c5c3fcdff516b5\"\n    },\n    {\n        \"_id\": \"66446497e07df5abac8610df\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation-2\",\n        \"request\": \"Recitation-1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T07:30:31.398Z\",\n        \"updatedAt\": \"2024-05-15T07:30:31.398Z\",\n        \"__v\": 0,\n        \"id\": \"66446497e07df5abac8610df\"\n    },\n    {\n        \"_id\": \"66448e68d1c43430d59ff682\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"lessonType\": \"Recitation\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation-2\",\n        \"request\": \"Recitation-1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T10:28:56.999Z\",\n        \"updatedAt\": \"2024-05-15T10:28:56.999Z\",\n        \"__v\": 0,\n        \"id\": \"66448e68d1c43430d59ff682\"\n    },\n    {\n        \"_id\": \"6644f49d7fdf26b9fa50406a\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"lessonType\": \"Recitation\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation-2\",\n        \"request\": \"Recitation-1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T17:45:01.366Z\",\n        \"updatedAt\": \"2024-05-15T17:45:01.366Z\",\n        \"__v\": 0,\n        \"id\": \"6644f49d7fdf26b9fa50406a\"\n    },\n    {\n        \"_id\": \"6644f63e7fdf26b9fa504075\",\n        \"userId\": \"664244ddf55103b32a093fa4\",\n        \"lessonType\": \"Recitation\",\n        \"courseId\": \"CS1010X\",\n        \"current\": \"Recitation-2\",\n        \"request\": \"Recitation-1\",\n        \"status\": false,\n        \"createdAt\": \"2024-05-15T17:51:58.965Z\",\n        \"updatedAt\": \"2024-05-15T17:51:58.965Z\",\n        \"__v\": 0,\n        \"id\": \"6644f63e7fdf26b9fa504075\"\n    }\n]"
                }
              ]
            },
            {
              "name": "Get a swap",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test('Response status code is 200', function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Content type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the swap object\", function () {",
                      "  const responseData = pm.response.json();",
                      "  ",
                      "  pm.expect(responseData).to.be.an('object');",
                      "  validateSwapSchema(responseData);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/api/swaps/{{swap_id}}",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps", "{{swap_id}}"]
                },
                "description": "### GET /api/swaps/:id\n\nThis endpoint makes an HTTP GET request to retrieve a single existing swap.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap.\n    \n\n#### Response (200)\n\nThe response will be a single swap of the unique id passed as a parameter."
              },
              "response": [
                {
                  "name": "Get a swap",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "localhost:4000/api/swaps/6645fa44653bc018ba11891f",
                      "host": ["localhost"],
                      "port": "4000",
                      "path": ["api", "swaps", "6645fa44653bc018ba11891f"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "294"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"126-hozER4OOZfmdPgXUQSxWOH1Idzg\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:28:42 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6645fa44653bc018ba11891f\",\n    \"userId\": \"6645f739653bc018ba118902\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"Tutorial-2\",\n    \"request\": \"Tutorial-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-16T12:21:24.997Z\",\n    \"updatedAt\": \"2024-05-16T12:21:24.997Z\",\n    \"__v\": 0,\n    \"id\": \"6645fa44653bc018ba11891f\"\n}"
                }
              ]
            },
            {
              "name": "Invalid get a swap",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Response status code is 400', function () {",
                      "    pm.expect(pm.response.code).to.equal(400);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/api/swaps/123",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps", "123"]
                },
                "description": "### GET /api/swaps/:id\n\nThis endpoint makes an HTTP GET request with a non-existent id.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap.\n    \n\n#### Response (400)\n\nThe response will be a single swap of the unique id passed as a parameter."
              },
              "response": [
                {
                  "name": "Invalid id",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "localhost:4000/api/swaps/6641ca6c0cf12b8bd38dd7b",
                      "host": ["localhost"],
                      "port": "4000",
                      "path": ["api", "swaps", "6641ca6c0cf12b8bd38dd7b"]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "122"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"7a-L4CXLx7AiXgA5tfakybSzYJIYjc\""
                    },
                    {
                      "key": "Date",
                      "value": "Wed, 15 May 2024 18:49:32 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": \"Cast to ObjectId failed for value \\\"6641ca6c0cf12b8bd38dd7b\\\" (type string) at path \\\"_id\\\" for model \\\"Swap\\\"\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains GET requests to test the API endpoint."
        },
        {
          "name": "POST requests",
          "item": [
            {
              "name": "Test creating a swap",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test(\"Response status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "  const responseData = pm.response.json();",
                      "",
                      "  pm.variables.set('swapId', responseData.userId);",
                      "",
                      "  pm.expect(responseData).to.be.an('object');",
                      "  validateSwapSchema(responseData);",
                      "});",
                      "",
                      "",
                      "// removes newly created user after tests ",
                      "if (pm.variables.get('swapId')) {",
                      "    const deleteReq = {",
                      "        url: `${pm.environment.get('url')}/api/swaps/${pm.variables.get('swapId')}`,",
                      "        method: 'DELETE',",
                      "    }",
                      "",
                      "    pm.sendRequest(deleteReq, (err, res) => {",
                      "        console.log(err ? err : res.json());",
                      "    })",
                      "}",
                      "",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userId\": \"6645f739653bc018ba118902\",\n  \"courseId\": \"CS1101S\",\n  \"lessonType\": \"Tutorial\",\n  \"current\": {\n    \"classNo\": \"2\",\n    \"startTime\": \"1930\",\n    \"endTime\": \"2100\",\n    \"weeks\": {\n      \"start\": \"2024-04-13\",\n      \"end\": \"2024-05-25\"\n    },\n    \"venue\": \"COM3-01-21\",\n    \"day\": \"Saturday\",\n    \"lessonType\": \"Tutorial\",\n    \"size\": 55,\n    \"covidZone\": \"A\"\n  },\n  \"request\": {\n    \"classNo\": \"1\",\n    \"startTime\": \"1930\",\n    \"endTime\": \"2100\",\n    \"weeks\": {\n      \"start\": \"2024-04-12\",\n      \"end\": \"2024-05-24\"\n    },\n    \"venue\": \"COM3-01-21\",\n    \"day\": \"Friday\",\n    \"lessonType\": \"Tutorial\",\n    \"size\": 55,\n    \"covidZone\": \"A\"\n  }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/api/swaps/",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps", ""]
                },
                "description": "### POST /api/users\n\nThis endpoint is used to create a new swap and DELETES the newly created swap afterwards, purely for testing the API endpoint, should not be used to create swaps.\n\n#### Request\n\n> Body \n  \n\n- `userId` (string, required): The unique id of the user this swap belongs to.\n    \n- `courseId` (string, required): The course the lessons belong to.\n    \n- `lessonType` (string, required): The typle of lesson to be swapped.\n    \n- `current` (object, required): A RawLesson.\n    \n- `request` (object, required): A RawLesson.\n    \n\n#### Response (201 )\n\nThe response will be the newly created swap which will be deleted automatically."
              },
              "response": [
                {
                  "name": "Test creating a swap",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"userId\": \"6645f739653bc018ba118902\",\n  \"courseId\": \"CS1101S\",\n  \"lessonType\": \"Tutorial\",\n  \"current\": {\n    \"classNo\": \"2\",\n    \"startTime\": \"1930\",\n    \"endTime\": \"2100\",\n    \"weeks\": {\n      \"start\": \"2024-04-13\",\n      \"end\": \"2024-05-25\"\n    },\n    \"venue\": \"COM3-01-21\",\n    \"day\": \"Saturday\",\n    \"lessonType\": \"Tutorial\",\n    \"size\": 55,\n    \"covidZone\": \"A\"\n  },\n  \"request\": {\n    \"classNo\": \"1\",\n    \"startTime\": \"1930\",\n    \"endTime\": \"2100\",\n    \"weeks\": {\n      \"start\": \"2024-04-12\",\n      \"end\": \"2024-05-24\"\n    },\n    \"venue\": \"COM3-01-21\",\n    \"day\": \"Friday\",\n    \"lessonType\": \"Tutorial\",\n    \"size\": 55,\n    \"covidZone\": \"A\"\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{url}}/api/swaps/",
                      "host": ["{{url}}"],
                      "path": ["api", "swaps", ""]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "294"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"126-lUG1MOer9Qv4cg9RrhmbTdI4QVM\""
                    },
                    {
                      "key": "Date",
                      "value": "Fri, 17 May 2024 05:33:51 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"userId\": \"6645f739653bc018ba118902\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"Tutorial-2\",\n    \"request\": \"Tutorial-1\",\n    \"status\": false,\n    \"_id\": \"6646ec3f466b4bb4a5c861bb\",\n    \"createdAt\": \"2024-05-17T05:33:51.914Z\",\n    \"updatedAt\": \"2024-05-17T05:33:51.914Z\",\n    \"__v\": 0,\n    \"id\": \"6646ec3f466b4bb4a5c861bb\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains POST requests to test the API endpoints."
        },
        {
          "name": "PATCH requests",
          "item": [
            {
              "name": "Update a swap",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test(\"Response status code is 200\", function () {",
                      "  pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "  const responseData = pm.response.json();",
                      "",
                      "  pm.expect(responseData).to.be.an('object');",
                      "  validateSwapSchema(responseData);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userId\": \"66445bf587da7d7883aff879\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Recitation\",\n    \"current\": \n    {\n        \"classNo\": \"2\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-13\",\n            \"end\": \"2024-05-25\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Saturday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    },\n    \"request\": \n    {\n        \"classNo\": \"1\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-12\",\n            \"end\": \"2024-05-24\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Friday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{url}}/api/swaps/{{swap_id}}",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps", "{{swap_id}}"]
                },
                "description": "### PATCH /api/swaps\n\nThis endpoint is used to patch an existing swap.\n\n#### Request\n\n> Param \n  \n\n- `:id`: The unique id of the user to update.\n    \n\n> Body \n  \n\n- `userId` (string, required): The unique id of the user this swap belongs to.\n    \n- `courseId` (string, required): The course the lessons belong to.\n    \n- `lessonType` (string, required): The typle of lesson to be swapped.\n    \n- `current` (object, required): A RawLesson.\n    \n- `request` (object, required): A RawLesson.\n    \n\n#### Response (200)\n\nThe response will be the updated user."
              },
              "response": [
                {
                  "name": "Update a swap",
                  "originalRequest": {
                    "method": "PATCH",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"userId\": \"66445bf587da7d7883aff879\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Recitation\",\n    \"current\": \n    {\n        \"classNo\": \"2\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-13\",\n            \"end\": \"2024-05-25\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Saturday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    },\n    \"request\": \n    {\n        \"classNo\": \"1\",\n        \"startTime\": \"1930\",\n        \"endTime\": \"2100\",\n        \"weeks\": {\n            \"start\": \"2024-04-12\",\n            \"end\": \"2024-05-24\"\n        },\n        \"venue\": \"COM3-01-21\",\n        \"day\": \"Friday\",\n        \"lessonType\": \"Recitation\",\n        \"size\": 55,\n        \"covidZone\": \"A\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "localhost:4000/api/swaps/66462f49f9e60e48bc97af75",
                      "host": ["localhost"],
                      "port": "4000",
                      "path": ["api", "swaps", "66462f49f9e60e48bc97af75"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "300"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"12c-tQKQ3Y3xYUUb1LG7x+txrqq8js8\""
                    },
                    {
                      "key": "Date",
                      "value": "Thu, 16 May 2024 20:41:39 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"66462f49f9e60e48bc97af75\",\n    \"userId\": \"66445bf587da7d7883aff879\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Recitation\",\n    \"current\": \"Recitation-2\",\n    \"request\": \"Recitation-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-16T16:07:37.275Z\",\n    \"updatedAt\": \"2024-05-16T20:41:39.950Z\",\n    \"__v\": 0,\n    \"id\": \"66462f49f9e60e48bc97af75\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains PATCH requests to test the API endpoint."
        },
        {
          "name": "DELETE requests",
          "item": [
            {
              "name": "Test deleting a swap",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const getReq = {",
                      "  url: `${pm.environment.get('url')}/api/swaps`,",
                      "  method: 'POST',",
                      "  header: {",
                      "    \"Content-Type\": \"application/json\"",
                      "  },",
                      "  body: {",
                      "    mode: 'raw',",
                      "    raw: JSON.stringify({",
                      "      \"userId\": \"6645f739653bc018ba118902\",",
                      "      \"courseId\": \"CS1101S\",",
                      "      \"lessonType\": \"Tutorial\",",
                      "      \"current\": {",
                      "        \"classNo\": \"2\",",
                      "        \"startTime\": \"1930\",",
                      "        \"endTime\": \"2100\",",
                      "        \"weeks\": {",
                      "          \"start\": \"2024-04-13\",",
                      "          \"end\": \"2024-05-25\"",
                      "        },",
                      "        \"venue\": \"COM3-01-21\",",
                      "        \"day\": \"Saturday\",",
                      "        \"lessonType\": \"Tutorial\",",
                      "        \"size\": 55,",
                      "        \"covidZone\": \"A\"",
                      "      },",
                      "      \"request\": {",
                      "        \"classNo\": \"1\",",
                      "        \"startTime\": \"1930\",",
                      "        \"endTime\": \"2100\",",
                      "        \"weeks\": {",
                      "          \"start\": \"2024-04-12\",",
                      "          \"end\": \"2024-05-24\"",
                      "        },",
                      "        \"venue\": \"COM3-01-21\",",
                      "        \"day\": \"Friday\",",
                      "        \"lessonType\": \"Tutorial\",",
                      "        \"size\": 55,",
                      "        \"covidZone\": \"A\"",
                      "      }",
                      "    })",
                      "  }",
                      "}",
                      "",
                      "pm.sendRequest(getReq, (err, res) => {",
                      "  const data = res.json();",
                      "",
                      "  if (err) {",
                      "    console.log(err);",
                      "  } else {",
                      "    console.log(data.id);",
                      "    pm.environment.set('delete_swap_id', data.id);",
                      "  }",
                      "})"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const userSchema = {",
                      "    \"title\": \"User\",",
                      "    \"description\": \"User schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"username\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"swapRequests\": {",
                      "            type: \"array\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"username\", \"id\" ]",
                      "}",
                      "",
                      "",
                      "function validateUserSchema(user) {",
                      "    pm.expect(user).to.have.jsonSchema(userSchema);",
                      "    pm.expect(user.password).to.not.exist;",
                      "}",
                      "",
                      "const swapSchema = {",
                      "    \"title\": \"Swap\",",
                      "    \"description\": \"Swap schema\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"_id\": {",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"userId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"courseId\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"lessonType\": {",
                      "            \"type\": \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"current\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        },",
                      "        \"request\": {",
                      "            type: \"string\",",
                      "            \"minLength\": 1,",
                      "        }, ",
                      "        \"status\": {",
                      "            type: \"boolean\"",
                      "        },",
                      "        \"createdAt\": {",
                      "            type: \"string\"",
                      "        }, ",
                      "        \"updatedAt\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"__v\": {",
                      "            type: \"integer\"",
                      "        }, ",
                      "        \"id\": {",
                      "            type: \"string\"",
                      "        }",
                      "    },",
                      "    \"required\": [ \"userId\", \"courseId\", \"lessonType\", \"current\", \"request\", \"id\" ]",
                      "}",
                      "",
                      "function validateSwapSchema(swapRequest) {",
                      "    pm.expect(swapRequest).to.have.jsonSchema(swapSchema);",
                      "}",
                      "",
                      "",
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "pm.test(\"Response Content-Type is application/json\", function () {",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "  pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "  const responseData = pm.response.json();",
                      "  if (responseData) {",
                      "    pm.variables.set('id', responseData.id);",
                      "",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    validateSwapSchema(responseData);",
                      "  }",
                      "});",
                      "",
                      "pm.test(\"Swap no longer exists\", function () {",
                      "  if (pm.variables.get('id')) {",
                      "    pm.sendRequest(`${pm.environment.get('url')}/api/swaps/${pm.variables.get('id')}`, (err, res) => {",
                      "      pm.expect(err).to.not.exist;",
                      "    })",
                      "  } ",
                      "});",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{url}}/api/swaps/{{delete_swap_id}}",
                  "host": ["{{url}}"],
                  "path": ["api", "swaps", "{{delete_swap_id}}"]
                },
                "description": "This request sends a POST request and a DELETE request to delete the created swap, based on environment variables, should not be used to delete existing swaps.\n\n#### Request\n\n> Param \n  \n\n- `id`: The unique id of the swap to be deleted.\n    \n\n#### Response (200)\n\nThe response will be the deleted swap."
              },
              "response": [
                {
                  "name": "Test deleting a swap",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{url}}/api/swaps/{{delete_swap_id}}",
                      "host": ["{{url}}"],
                      "path": ["api", "swaps", "{{delete_swap_id}}"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "X-Powered-By",
                      "value": "Express"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Content-Length",
                      "value": "294"
                    },
                    {
                      "key": "ETag",
                      "value": "W/\"126-VduFr7JfEdVPYw7ZYDl3MqNAVY4\""
                    },
                    {
                      "key": "Date",
                      "value": "Fri, 17 May 2024 05:38:44 GMT"
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "key": "Keep-Alive",
                      "value": "timeout=5"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"_id\": \"6646ed64466b4bb4a5c861cb\",\n    \"userId\": \"6645f739653bc018ba118902\",\n    \"courseId\": \"CS1101S\",\n    \"lessonType\": \"Tutorial\",\n    \"current\": \"Tutorial-2\",\n    \"request\": \"Tutorial-1\",\n    \"status\": false,\n    \"createdAt\": \"2024-05-17T05:38:44.048Z\",\n    \"updatedAt\": \"2024-05-17T05:38:44.048Z\",\n    \"__v\": 0,\n    \"id\": \"6646ed64466b4bb4a5c861cb\"\n}"
                }
              ]
            }
          ],
          "description": "This folder contains DELETE requests to test the API endpoints."
        }
      ],
      "description": "This folder contains requests for testing CRUD functionality of swaps.\n\n#### Swap\n\n- `userId (string, required)`: The unique id of the user this swap belongs to.\n    \n- `courseId (string, required)`: The module code the swap belongs to.\n    \n- `lessonType (string, required)`: The type of the classes to be swapped.\n    \n- `current (string, required)`: The current class the user has.\n    \n- `request (string, required)`: The desired class of the user.\n    \n- `status (boolean)`: A boolean representing successful swap.\n    \n- `_id (string)`: The unique id of this swap.\n    \n- `createdAt (Date)`: The date of creation of the swap.\n    \n- `updatedAt (Date)`: The date of update of the swap.\n    \n- `__v (number)`: The version number of this swap.\n    \n- `id (string)`: The unique id of this swap."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ]
}
